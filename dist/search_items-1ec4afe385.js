searchNodes=[{"doc":"The Entity Reference Protocol (ERP) is a key component in the Noizu framework, used for handling references to entities in a uniform and flexible manner. The protocol defines a standard set of functions that must be implemented by any type that adheres to the protocol. This allows for a consistent way to interact with different types of entities (e.g., database records, structs, etc.) without having to know their specific implementation details. Purpose The purpose of the ERP is to provide a consistent interface for working with references to entities. This allows a table to reference various other entity types in a generic way. It also provides a straight forward mechanism for handling references without knowing in advance if they have been expanded or their exact type. Usage: The ERP protocol is used whenever there is a need to reference an entity. This can be in the form of a ERP reference, a string reference, or the actual object. The protocol provides functions to convert between these different forms (i.e., ref , sref , entity , and record ). This makes it easy to work with different types of references without having to know the specific details of the entity being referenced. The protocol also includes functions that return either just the value ( id , ref , sref , entity , record ) or the same but wrapped in an {:ok, term} or {:error, details} tuple for matching ( id_ok , ref_ok , sref_ok , entity_ok , entity_ok! ). This provides flexibility in handling both the normal and error cases. Why The ERP protocol is useful because it abstracts away the details of the entities being referenced. Making embedding, linking, urls, and other cases easy to implement in a generic way. Users can write code that doesn't care if it's being passed ref tuples, ref strings, actual entities, ecto records etc. but can simply call the protocol to cast to the desired format and handle as needed for querying, processing, returning, linking, etc. Protocol It defines the following functions: id/1 : Retrieves the underlying id for a given ERP. id_ok/1 : Similar to id/1 but returns the result in the form of {:ok, value} or {:error, error} . ref/1 : Casts the given argument to a ERP reference. ref_ok/1 : Similar to ref/1 but returns the result in the form of {:ok, value} or {:error, error} . sref/1 : Casts the given argument to a ERP string reference. sref_ok/1 : Similar to sref/1 but returns the result in the form of {:ok, value} or {:error, error} . record/1 : Converts the given argument to a persistence object. Options may be passed to coordinate actions like expanding embedded references. record!/1 : Similar to record/1 but with a transaction wrapper if required. entity/1 : Converts the given argument to a scaffolding.struct object. Options may be passed to coordinate actions like expanding embedded references. entity_ok/1 : Similar to entity/1 but returns the result in the form of {:ok, value} or {:error, error} . entity!/1 : Similar to entity/1 but with a transaction wrapper if required. entity_ok!/1 : Similar to entity_ok/1 but with a transaction wrapper if required. The protocol is designed with the @fallback_to_any true directive, which means it will fall back to the Any implementation if no specific implementation for the provided data type is found.","ref":"Noizu.ERP.html","title":"Noizu.ERP","type":"protocol"},{"doc":"Similar to entity/1 but will execute mnesia functions immediately with out using an outer transaction wrapper","ref":"Noizu.ERP.html#entity!/2","title":"Noizu.ERP.entity!/2","type":"function"},{"doc":"Convert the given argument to a scaffolding.struct object. Options may be passed to coordinate actions like expanding embedded references.","ref":"Noizu.ERP.html#entity/2","title":"Noizu.ERP.entity/2","type":"function"},{"doc":"Similar to entity_ok/1 but with a transaction wrapper if required.","ref":"Noizu.ERP.html#entity_ok!/2","title":"Noizu.ERP.entity_ok!/2","type":"function"},{"doc":"Similar to entity/1 but returns the result in the form of {:ok, value} or {:error, error} .","ref":"Noizu.ERP.html#entity_ok/2","title":"Noizu.ERP.entity_ok/2","type":"function"},{"doc":"Retrieves the underlying id for a given ERP reference. The argument can be a ERP reference, a string reference, or the actual object.","ref":"Noizu.ERP.html#id/1","title":"Noizu.ERP.id/1","type":"function"},{"doc":"Similar to id/1 but returns the result in the form of {:ok, value} or {:error, error} .","ref":"Noizu.ERP.html#id_ok/1","title":"Noizu.ERP.id_ok/1","type":"function"},{"doc":"Similar to record/1 but will execute mnesia functions immediately with out using an outer transaction wrapper.","ref":"Noizu.ERP.html#record!/2","title":"Noizu.ERP.record!/2","type":"function"},{"doc":"Convert the given argument to a persistence object. Options may be passed to coordinate actions like expanding embedded references.","ref":"Noizu.ERP.html#record/2","title":"Noizu.ERP.record/2","type":"function"},{"doc":"Casts the given argument to a ERP reference. The argument can be a ERP reference, a string reference, or the actual object.","ref":"Noizu.ERP.html#ref/1","title":"Noizu.ERP.ref/1","type":"function"},{"doc":"Similar to ref/1 but returns the result in the form of {:ok, value} or {:error, error} .","ref":"Noizu.ERP.html#ref_ok/1","title":"Noizu.ERP.ref_ok/1","type":"function"},{"doc":"Casts the given argument to a ERP string reference. The argument can be a ERP reference, a string reference, or the actual object.","ref":"Noizu.ERP.html#sref/1","title":"Noizu.ERP.sref/1","type":"function"},{"doc":"Similar to sref/1 but returns the result in the form of {:ok, value} or {:error, error} .","ref":"Noizu.ERP.html#sref_ok/1","title":"Noizu.ERP.sref_ok/1","type":"function"},{"doc":"","ref":"Noizu.ERP.html#t:t/0","title":"Noizu.ERP.t/0","type":"type"},{"doc":"The Noizu.ElixirCore.CallerEntity module provides a convenience structure for tracking API caller authentication levels. It supports the levels :internal , :restricted , :system , and :admin . Types t : A structure representing the CallerEntity with fields identifier and vsn . Functions","ref":"Noizu.ElixirCore.CallerEntity.html","title":"Noizu.ElixirCore.CallerEntity","type":"module"},{"doc":"Noizu.ERP handler","ref":"Noizu.ElixirCore.CallerEntity.html#entity!/2","title":"Noizu.ElixirCore.CallerEntity.entity!/2","type":"function"},{"doc":"Returns the CallerEntity as an entity struct. Raises an error if the conversion fails. Examples iex&gt; Noizu.ElixirCore.CallerEntity . entity! ( % Noizu.ElixirCore.CallerEntity { identifier : :system } ) % Noizu.ElixirCore.CallerEntity { identifier : :system } iex&gt; Noizu.ElixirCore.CallerEntity . entity! ( { :ref , Noizu.ElixirCore.CallerEntity , :system } ) % Noizu.ElixirCore.CallerEntity { identifier : :system } iex&gt; Noizu.ElixirCore.CallerEntity . entity! ( &quot;ref.noizu-caller.system&quot; ) % Noizu.ElixirCore.CallerEntity { identifier : :system } iex&gt; Noizu.ElixirCore.CallerEntity . entity! ( :system ) % Noizu.ElixirCore.CallerEntity { identifier : :system } Code Review The function could benefit from more detailed documentation.","ref":"Noizu.ElixirCore.CallerEntity.html#entity/2","title":"Noizu.ElixirCore.CallerEntity.entity/2","type":"function"},{"doc":"Returns the CallerEntity as an entity struct as an :ok tuple or raises an error if the conversion fails. Examples iex&gt; Noizu.ElixirCore.CallerEntity . entity_ok! ( % Noizu.ElixirCore.CallerEntity { identifier : :system } ) { :ok , % Noizu.ElixirCore.CallerEntity { identifier : :system } } Code Review The function could benefit from more detailed documentation.","ref":"Noizu.ElixirCore.CallerEntity.html#entity_ok!/2","title":"Noizu.ElixirCore.CallerEntity.entity_ok!/2","type":"function"},{"doc":"Returns the CallerEntity as an entity struct as an :ok tuple or the original object as an :error tuple. Examples iex&gt; Noizu.ElixirCore.CallerEntity . entity_ok ( % Noizu.ElixirCore.CallerEntity { identifier : :system } ) { :ok , % Noizu.ElixirCore.CallerEntity { identifier : :system } } Code Review The function could benefit from more detailed documentation.","ref":"Noizu.ElixirCore.CallerEntity.html#entity_ok/2","title":"Noizu.ElixirCore.CallerEntity.entity_ok/2","type":"function"},{"doc":"Returns the identifier of the CallerEntity. Examples iex&gt; Noizu.ElixirCore.CallerEntity . id ( % Noizu.ElixirCore.CallerEntity { identifier : :system } ) :system iex&gt; Noizu.ElixirCore.CallerEntity . id ( { :ref , Noizu.ElixirCore.CallerEntity , :system } ) :system iex&gt; Noizu.ElixirCore.CallerEntity . id ( &quot;ref.noizu-caller.system&quot; ) :system iex&gt; Noizu.ElixirCore.CallerEntity . id ( :system ) :system Code Review The function could benefit from more detailed documentation.","ref":"Noizu.ElixirCore.CallerEntity.html#id/1","title":"Noizu.ElixirCore.CallerEntity.id/1","type":"function"},{"doc":"Returns the identifier of the CallerEntity as an :ok tuple or the original object as an :error tuple. Examples iex&gt; Noizu.ElixirCore.CallerEntity . id_ok ( % Noizu.ElixirCore.CallerEntity { identifier : :system } ) { :ok , :system } Code Review The function could benefit from more detailed documentation.","ref":"Noizu.ElixirCore.CallerEntity.html#id_ok/1","title":"Noizu.ElixirCore.CallerEntity.id_ok/1","type":"function"},{"doc":"Noizu.ERP handler","ref":"Noizu.ElixirCore.CallerEntity.html#record!/2","title":"Noizu.ElixirCore.CallerEntity.record!/2","type":"function"},{"doc":"Returns the CallerEntity as a record. Examples iex&gt; Noizu.ElixirCore.CallerEntity . record ( % Noizu.ElixirCore.CallerEntity { identifier : :system } ) % Noizu.ElixirCore.CallerEntity { identifier : :system } iex&gt; Noizu.ElixirCore.CallerEntity . record ( { :ref , Noizu.ElixirCore.CallerEntity , :system } ) % Noizu.ElixirCore.CallerEntity { identifier : :system } iex&gt; Noizu.ElixirCore.CallerEntity . record ( &quot;ref.noizu-caller.system&quot; ) % Noizu.ElixirCore.CallerEntity { identifier : :system } iex&gt; Noizu.ElixirCore.CallerEntity . record ( :system ) % Noizu.ElixirCore.CallerEntity { identifier : :system } Code Review The function could benefit from more detailed documentation.","ref":"Noizu.ElixirCore.CallerEntity.html#record/2","title":"Noizu.ElixirCore.CallerEntity.record/2","type":"function"},{"doc":"Returns the reference tuple for the CallerEntity. Examples iex&gt; Noizu.ElixirCore.CallerEntity . ref ( % Noizu.ElixirCore.CallerEntity { identifier : :system } ) { :ref , Noizu.ElixirCore.CallerEntity , :system } iex&gt; Noizu.ElixirCore.CallerEntity . ref ( { :ref , Noizu.ElixirCore.CallerEntity , :system } ) { :ref , Noizu.ElixirCore.CallerEntity , :system } iex&gt; Noizu.ElixirCore.CallerEntity . ref ( &quot;ref.noizu-caller.system&quot; ) { :ref , Noizu.ElixirCore.CallerEntity , :system } iex&gt; Noizu.ElixirCore.CallerEntity . ref ( :system ) { :ref , Noizu.ElixirCore.CallerEntity , :system } Code Review The function could benefit from more detailed documentation.","ref":"Noizu.ElixirCore.CallerEntity.html#ref/1","title":"Noizu.ElixirCore.CallerEntity.ref/1","type":"function"},{"doc":"Returns the reference tuple of the CallerEntity as an :ok tuple or the original object as an :error tuple. Examples iex&gt; Noizu.ElixirCore.CallerEntity . ref_ok ( % Noizu.ElixirCore.CallerEntity { identifier : :system } ) { :ok , { :ref , Noizu.ElixirCore.CallerEntity , :system } } Code Review The function could benefit from more detailed documentation.","ref":"Noizu.ElixirCore.CallerEntity.html#ref_ok/1","title":"Noizu.ElixirCore.CallerEntity.ref_ok/1","type":"function"},{"doc":"Returns the string reference for the CallerEntity. Examples iex&gt; Noizu.ElixirCore.CallerEntity . sref ( % Noizu.ElixirCore.CallerEntity { identifier : :system } ) &quot;ref.noizu-caller.system&quot; iex&gt; Noizu.ElixirCore.CallerEntity . sref ( { :ref , Noizu.ElixirCore.CallerEntity , :system } ) &quot;ref.noizu-caller.system&quot; iex&gt; Noizu.ElixirCore.CallerEntity . sref ( &quot;ref.noizu-caller.system&quot; ) &quot;ref.noizu-caller.system&quot; iex&gt; Noizu.ElixirCore.CallerEntity . sref ( :system ) &quot;ref.noizu-caller.system&quot; Code Review The function could benefit from more detailed documentation.","ref":"Noizu.ElixirCore.CallerEntity.html#sref/1","title":"Noizu.ElixirCore.CallerEntity.sref/1","type":"function"},{"doc":"Returns the string reference of the CallerEntity as an :ok tuple or the original object as an :error tuple. Examples iex&gt; Noizu.ElixirCore.CallerEntity . sref_ok ( % Noizu.ElixirCore.CallerEntity { identifier : :system } ) { :ok , &quot;ref.noizu-caller.system&quot; } Code Review The function could benefit from more detailed documentation.","ref":"Noizu.ElixirCore.CallerEntity.html#sref_ok/1","title":"Noizu.ElixirCore.CallerEntity.sref_ok/1","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.CallerEntity.html#t:t/0","title":"Noizu.ElixirCore.CallerEntity.t/0","type":"type"},{"doc":"CallingContext Context object used to track a caller's state and permissions along with unique request identifier for tracking requests as they travel through the layers in your application. Useful for log collation, permission checks, access auditing. Application Config Options and Defaults Include Default IO.inspect formatter defimpl for CallingContext config :noizu_core, inspect_calling_context: true Request ID Extraction Strategy. {m,f} or function2 that accepts (conn, default) and pulls request id (CallingContext.token) from Plug.Conn. config :noizu_core, token_strategy: {Noizu.ElixirCore.CallingContext, :extract_token} - Request Reason Extraction Strategy. {m,f} or function2 that accepts (conn, default) and pulls request reason (CallingContext.reason) from Plug.Conn. config :noizu_core, token_strategy: {Noizu.ElixirCore.CallingContext, :extract_reason} Request Caller Extraction Strategy. {m,f} or function2 that accepts (conn, default) and pulls request Caller (CallingContext.caller) from Plug.Conn config :noizu_core, get_plug_caller: {Noizu.ElixirCore.CallingContext, :extract_caller} - Request Caller's Auth Map Extraction Strategy. {m,f} or function2 that accepts (conn, default) and returns effective permission map ContextCaller.auth. config :noizu_core, acl_strategy: {Noizu.ElixirCore.CallingContext, :default_auth} Default Blank/Empty Request Reason config :noizu_core, default_request_reason: :none Default Restricted User Reference or Object config :noizu_core, default_internal_user: {:ref, Noizu.ElixirCore.CallerEntity, :restricted} Default Internal User Reference or Object config :noizu_core, default_internal_user: {:ref, Noizu.ElixirCore.CallerEntity, :internal} Default System User Reference or Object config :noizu_core, default_system_user: {:ref, Noizu.ElixirCore.CallerEntity, :system} Default Admin User Reference or Object config :noizu_core, default_admin_user: {:ref, Noizu.ElixirCore.CallerEntity, :admin} Default Restricted User Auth Map config :noizu_core, default_internal_auth: %{permissions: %{restricted: true}} Default Internal User Auth Map config :noizu_core, default_internal_auth: %{permissions: %{internal: true}} Default Ssy User Auth Map config :noizu_core, default_system_auth: %{permissions: %{system: true, internal: true}} Default Admin User Auth Map config :noizu_core, default_admin_auth: %{permissions: %{admin: true, system: true, internal: true}}","ref":"Noizu.ElixirCore.CallingContext.html","title":"Noizu.ElixirCore.CallingContext","type":"module"},{"doc":"Create new calling context with default admin user caller and permissions.","ref":"Noizu.ElixirCore.CallingContext.html#admin/0","title":"Noizu.ElixirCore.CallingContext.admin/0","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.CallingContext.html#admin/1","title":"Noizu.ElixirCore.CallingContext.admin/1","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.CallingContext.html#admin/2","title":"Noizu.ElixirCore.CallingContext.admin/2","type":"function"},{"doc":"Default logic for grabbing conn's request reason. Using either config noizu_core, extract_reason: {m,f} or included extract_token method.","ref":"Noizu.ElixirCore.CallingContext.html#default_reason/2","title":"Noizu.ElixirCore.CallingContext.default_reason/2","type":"function"},{"doc":"Default logic for grabbing conn's request id. Using either config noizu_core, token_strategy: {m,f} or included extract_token method.","ref":"Noizu.ElixirCore.CallingContext.html#default_token/2","title":"Noizu.ElixirCore.CallingContext.default_token/2","type":"function"},{"doc":"Extract caller permission level from Plug.Conn. (Currently only depends on default value)","ref":"Noizu.ElixirCore.CallingContext.html#extract_caller/2","title":"Noizu.ElixirCore.CallingContext.extract_caller/2","type":"function"},{"doc":"Extract Request Reason from Plug.Conn. Useful for logging purposes/exception handling messaging/tracing on backend.","ref":"Noizu.ElixirCore.CallingContext.html#extract_reason/2","title":"Noizu.ElixirCore.CallingContext.extract_reason/2","type":"function"},{"doc":"Extract Request Id Token from Plug.Conn or Generate UUID if non found. Attached to CallingContext to include in log output for log collation.","ref":"Noizu.ElixirCore.CallingContext.html#extract_token/2","title":"Noizu.ElixirCore.CallingContext.extract_token/2","type":"function"},{"doc":"Get caller effective authentication map.","ref":"Noizu.ElixirCore.CallingContext.html#get_auth/2","title":"Noizu.ElixirCore.CallingContext.get_auth/2","type":"function"},{"doc":"Get caller from Plug.Conn","ref":"Noizu.ElixirCore.CallingContext.html#get_caller/2","title":"Noizu.ElixirCore.CallingContext.get_caller/2","type":"function"},{"doc":"Get call reason from Plug.Conn","ref":"Noizu.ElixirCore.CallingContext.html#get_reason/2","title":"Noizu.ElixirCore.CallingContext.get_reason/2","type":"function"},{"doc":"Get call request id from Plug.Conn","ref":"Noizu.ElixirCore.CallingContext.html#get_token/2","title":"Noizu.ElixirCore.CallingContext.get_token/2","type":"function"},{"doc":"Create new calling context with default internal user caller and permissions.","ref":"Noizu.ElixirCore.CallingContext.html#internal/0","title":"Noizu.ElixirCore.CallingContext.internal/0","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.CallingContext.html#internal/1","title":"Noizu.ElixirCore.CallingContext.internal/1","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.CallingContext.html#internal/2","title":"Noizu.ElixirCore.CallingContext.internal/2","type":"function"},{"doc":"Strip CallingContext meta data from Logger.","ref":"Noizu.ElixirCore.CallingContext.html#meta_strip/1","title":"Noizu.ElixirCore.CallingContext.meta_strip/1","type":"function"},{"doc":"Update Logger with CallingContext meta data.","ref":"Noizu.ElixirCore.CallingContext.html#meta_update/1","title":"Noizu.ElixirCore.CallingContext.meta_update/1","type":"function"},{"doc":"Extract CallingContext meta data for Logger","ref":"Noizu.ElixirCore.CallingContext.html#metadata/1","title":"Noizu.ElixirCore.CallingContext.metadata/1","type":"function"},{"doc":"Generate new Context.Caller by passing in Caller, Auth and options.","ref":"Noizu.ElixirCore.CallingContext.html#new/3","title":"Noizu.ElixirCore.CallingContext.new/3","type":"function"},{"doc":"Prepare Context object with for given conn. Sets Process meta data by default.","ref":"Noizu.ElixirCore.CallingContext.html#new_conn/2","title":"Noizu.ElixirCore.CallingContext.new_conn/2","type":"function"},{"doc":"Prepare Context object with given caller/auth and conn request details. Sets Process meta data by default.","ref":"Noizu.ElixirCore.CallingContext.html#new_conn/4","title":"Noizu.ElixirCore.CallingContext.new_conn/4","type":"function"},{"doc":"Create new calling context with default restricted user caller and permissions.","ref":"Noizu.ElixirCore.CallingContext.html#restricted/0","title":"Noizu.ElixirCore.CallingContext.restricted/0","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.CallingContext.html#restricted/1","title":"Noizu.ElixirCore.CallingContext.restricted/1","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.CallingContext.html#restricted/2","title":"Noizu.ElixirCore.CallingContext.restricted/2","type":"function"},{"doc":"Create new calling context with default system user caller and permissions.","ref":"Noizu.ElixirCore.CallingContext.html#system/0","title":"Noizu.ElixirCore.CallingContext.system/0","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.CallingContext.html#system/1","title":"Noizu.ElixirCore.CallingContext.system/1","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.CallingContext.html#system/2","title":"Noizu.ElixirCore.CallingContext.system/2","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.CallingContext.html#t:t/0","title":"Noizu.ElixirCore.CallingContext.t/0","type":"type"},{"doc":"Provides guards for caller context and reference checks. Calling Context Guards The following guards are used to validate the caller context: is_caller_context/1 : Checks if the value is a struct of type Noizu.ElixirCore.CallingContext . caller_context_with_permissions/1 : Checks if the value is a caller context struct with a permissions map. The following guards are used to validate specific caller types: is_system_caller/1 : Checks if the value is a system caller with the system permission. is_admin_caller/1 : Checks if the value is an admin caller with the admin permission. is_internal_caller/1 : Checks if the value is an internal caller with the internal permission. is_restricted_caller/1 : Checks if the value is a restricted caller without any permissions or with the restricted permission set to true. Caller Permission Macros The following macros are used to check caller permissions: caller_permission?(term, permission) : Checks if the given term has the specified permission . caller_permission_value?(term, permission, value) : Checks if the given term has the specified permission with the specified value . Ref Guards The following guards are used for reference checks: is_ref/1 : Checks if the value is a reference tuple of the form {:ref, Module, identifier} . is_sref/1 : Checks if the value is a reference string of the form &quot;ref.module.identifier&quot; . entity_ref/1 : Checks if the value is a reference tuple, reference string, or a struct with a vsn field. Code Review The code is well-documented and follows the Elixir naming conventions. The guards are defined clearly and provide useful abstractions for caller context and reference checks.","ref":"Noizu.ElixirCore.Guards.html","title":"Noizu.ElixirCore.Guards","type":"module"},{"doc":"","ref":"Noizu.ElixirCore.Guards.html#caller_context_with_permissions/1","title":"Noizu.ElixirCore.Guards.caller_context_with_permissions/1","type":"macro"},{"doc":"","ref":"Noizu.ElixirCore.Guards.html#caller_permission_value?/3","title":"Noizu.ElixirCore.Guards.caller_permission_value?/3","type":"macro"},{"doc":"","ref":"Noizu.ElixirCore.Guards.html#caller_permission?/2","title":"Noizu.ElixirCore.Guards.caller_permission?/2","type":"macro"},{"doc":"","ref":"Noizu.ElixirCore.Guards.html#entity_ref/1","title":"Noizu.ElixirCore.Guards.entity_ref/1","type":"macro"},{"doc":"","ref":"Noizu.ElixirCore.Guards.html#has_call_reason?/1","title":"Noizu.ElixirCore.Guards.has_call_reason?/1","type":"macro"},{"doc":"","ref":"Noizu.ElixirCore.Guards.html#is_admin_caller/1","title":"Noizu.ElixirCore.Guards.is_admin_caller/1","type":"macro"},{"doc":"","ref":"Noizu.ElixirCore.Guards.html#is_caller_context/1","title":"Noizu.ElixirCore.Guards.is_caller_context/1","type":"macro"},{"doc":"","ref":"Noizu.ElixirCore.Guards.html#is_internal_caller/1","title":"Noizu.ElixirCore.Guards.is_internal_caller/1","type":"macro"},{"doc":"","ref":"Noizu.ElixirCore.Guards.html#is_ref/1","title":"Noizu.ElixirCore.Guards.is_ref/1","type":"macro"},{"doc":"","ref":"Noizu.ElixirCore.Guards.html#is_restricted_caller/1","title":"Noizu.ElixirCore.Guards.is_restricted_caller/1","type":"macro"},{"doc":"","ref":"Noizu.ElixirCore.Guards.html#is_sref/1","title":"Noizu.ElixirCore.Guards.is_sref/1","type":"macro"},{"doc":"","ref":"Noizu.ElixirCore.Guards.html#is_system_caller/1","title":"Noizu.ElixirCore.Guards.is_system_caller/1","type":"macro"},{"doc":"","ref":"Noizu.ElixirCore.Guards.html#permission?/2","title":"Noizu.ElixirCore.Guards.permission?/2","type":"macro"},{"doc":"","ref":"Noizu.ElixirCore.Guards.html#permission?/3","title":"Noizu.ElixirCore.Guards.permission?/3","type":"macro"},{"doc":"","ref":"Noizu.ElixirCore.OSP.html","title":"Noizu.ElixirCore.OSP","type":"protocol"},{"doc":"Extract an option from user provided values","ref":"Noizu.ElixirCore.OSP.html#extract/2","title":"Noizu.ElixirCore.OSP.extract/2","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.OSP.html#t:t/0","title":"Noizu.ElixirCore.OSP.t/0","type":"type"},{"doc":"","ref":"Noizu.ElixirCore.OptionList.html","title":"Noizu.ElixirCore.OptionList","type":"module"},{"doc":"","ref":"Noizu.ElixirCore.OptionList.html#t:t/0","title":"Noizu.ElixirCore.OptionList.t/0","type":"type"},{"doc":"","ref":"Noizu.ElixirCore.OptionSettings.html","title":"Noizu.ElixirCore.OptionSettings","type":"module"},{"doc":"","ref":"Noizu.ElixirCore.OptionSettings.html#expand/2","title":"Noizu.ElixirCore.OptionSettings.expand/2","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.OptionSettings.html#t:t/0","title":"Noizu.ElixirCore.OptionSettings.t/0","type":"type"},{"doc":"","ref":"Noizu.ElixirCore.OptionValue.html","title":"Noizu.ElixirCore.OptionValue","type":"module"},{"doc":"","ref":"Noizu.ElixirCore.OptionValue.html#t:t/0","title":"Noizu.ElixirCore.OptionValue.t/0","type":"type"},{"doc":"","ref":"Noizu.ElixirCore.PartialObjectCheck.html","title":"Noizu.ElixirCore.PartialObjectCheck","type":"module"},{"doc":"","ref":"Noizu.ElixirCore.PartialObjectCheck.html#check/2","title":"Noizu.ElixirCore.PartialObjectCheck.check/2","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.PartialObjectCheck.html#prepare/1","title":"Noizu.ElixirCore.PartialObjectCheck.prepare/1","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.PartialObjectCheck.html#prepare_field/1","title":"Noizu.ElixirCore.PartialObjectCheck.prepare_field/1","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.PartialObjectCheck.html#t:t/0","title":"Noizu.ElixirCore.PartialObjectCheck.t/0","type":"type"},{"doc":"","ref":"Noizu.ElixirCore.PartialObjectCheck.FieldConstraint.html","title":"Noizu.ElixirCore.PartialObjectCheck.FieldConstraint","type":"module"},{"doc":"","ref":"Noizu.ElixirCore.PartialObjectCheck.FieldConstraint.html#check/2","title":"Noizu.ElixirCore.PartialObjectCheck.FieldConstraint.check/2","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.PartialObjectCheck.FieldConstraint.html#t:t/0","title":"Noizu.ElixirCore.PartialObjectCheck.FieldConstraint.t/0","type":"type"},{"doc":"","ref":"Noizu.ElixirCore.PartialObjectCheck.TypeConstraint.html","title":"Noizu.ElixirCore.PartialObjectCheck.TypeConstraint","type":"module"},{"doc":"","ref":"Noizu.ElixirCore.PartialObjectCheck.TypeConstraint.html#check/2","title":"Noizu.ElixirCore.PartialObjectCheck.TypeConstraint.check/2","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.PartialObjectCheck.TypeConstraint.html#t:t/0","title":"Noizu.ElixirCore.PartialObjectCheck.TypeConstraint.t/0","type":"type"},{"doc":"","ref":"Noizu.ElixirCore.PartialObjectCheck.ValueConstraint.html","title":"Noizu.ElixirCore.PartialObjectCheck.ValueConstraint","type":"module"},{"doc":"","ref":"Noizu.ElixirCore.PartialObjectCheck.ValueConstraint.html#check/2","title":"Noizu.ElixirCore.PartialObjectCheck.ValueConstraint.check/2","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.PartialObjectCheck.ValueConstraint.html#perform_check/2","title":"Noizu.ElixirCore.PartialObjectCheck.ValueConstraint.perform_check/2","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.PartialObjectCheck.ValueConstraint.html#t:t/0","title":"Noizu.ElixirCore.PartialObjectCheck.ValueConstraint.t/0","type":"type"},{"doc":"","ref":"Noizu.ElixirCore.SlimOptions.html","title":"Noizu.ElixirCore.SlimOptions","type":"protocol"},{"doc":"","ref":"Noizu.ElixirCore.SlimOptions.html#slim/1","title":"Noizu.ElixirCore.SlimOptions.slim/1","type":"function"},{"doc":"","ref":"Noizu.ElixirCore.SlimOptions.html#t:t/0","title":"Noizu.ElixirCore.SlimOptions.t/0","type":"type"},{"doc":"This module contains changesets that are used in updating the FastGlobal related schema. The changesets are defined in a way that they can be easily applied or rolled back. The FastGlobal changeset updates or rolls back changes related to Noizu.FastGlobal.Database.Settings. Usage Call the change_sets/0 function to get the list of changesets. Each changeset is a map that contains the following keys: :changeset : A string that describes the changeset. :author : The author of the changeset. :note : A note about the changeset. :environments : The environments where the changeset is applicable. It can be set to :all for all environments. :update : A function that, when called, will apply the changeset. :rollback : A function that, when called, will roll back the changeset. Code Review The code in this module is well-organized and follows standard Elixir conventions. The change_sets/0 function is a good example of how to define changesets in a way that makes it easy to apply and roll back changes. The use of anonymous functions for the :update and :rollback keys provides a clear and concise way to define the actions to be taken for each changeset. The neighbors/0 function is a nice utility function that abstracts away the details of retrieving the list of nodes in the topology. Overall, the code in this module is clean, efficient, and easy to understand.","ref":"Noizu.FastGlobal.ChangeSet.html","title":"Noizu.FastGlobal.ChangeSet","type":"module"},{"doc":"Returns a list of changesets for updating the FastGlobal related schema. Each changeset is a map that contains keys for the changeset description, author, note, applicable environments, an update function, and a rollback function.","ref":"Noizu.FastGlobal.ChangeSet.html#change_sets/0","title":"Noizu.FastGlobal.ChangeSet.change_sets/0","type":"function"},{"doc":"","ref":"Noizu.FastGlobal.ChangeSet.html#create_table/2","title":"Noizu.FastGlobal.ChangeSet.create_table/2","type":"function"},{"doc":"","ref":"Noizu.FastGlobal.ChangeSet.html#destroy_table/2","title":"Noizu.FastGlobal.ChangeSet.destroy_table/2","type":"function"},{"doc":"Retrieves the list of nodes in the topology. The topology provider is retrieved from the application environment with the key :noizu_mnesia_versioning . The nodes are retrieved from the topology provider with the mnesia_nodes/0 function. The function returns {:ok, nodes} where nodes is the list of nodes.","ref":"Noizu.FastGlobal.ChangeSet.html#neighbors/0","title":"Noizu.FastGlobal.ChangeSet.neighbors/0","type":"function"},{"doc":"The Noizu.FastGlobal.Cluster module provides functionality for handling global data in a distributed cluster. Functionality get_settings/0 : Retrieves the settings for the FastGlobal cluster. sync_record__write/4 : Writes a record to the FastGlobal cluster. sync_record/4 : Retrieves a record from the FastGlobal cluster. get/1 : Retrieves the value for a given identifier from the FastGlobal cluster. get/2 : Retrieves the value for a given identifier from the FastGlobal cluster with a default value. get/3 : Retrieves the value for a given identifier from the FastGlobal cluster with a default value and options. get_record/1 : Retrieves a record for a given identifier from the FastGlobal cluster. put/3 : Puts a value into the FastGlobal cluster. put/4 : Puts a value into the FastGlobal cluster with options. coordinate_put/4 : Coordinates the put operation in the FastGlobal cluster. Code Review 📚 Readability: The code is well-documented and includes clear explanations of each function's purpose and steps. The comments and documentation help understand the code's behavior and usage. 👍 🧾 Best practices: The code follows Elixir best practices, such as using pattern matching, proper error handling, and appropriate function naming. It adheres to the conventions and guidelines of the Elixir language. 👍 ⚙ Code Efficiency: The code demonstrates efficient approaches, such as acquiring semaphore locks for exclusive access, parallel processing of updates on different nodes, and handling synchronization in a distributed cluster. The implementation appears to be optimized for performance. 👍 👷‍♀️ Maintainability: The code is relatively easy to maintain due to its clear structure, proper documentation, and adherence to best practices. However, there are some areas of complexity, such as nested cond clauses, which could benefit from refactoring to improve readability and maintainability. Consider breaking down complex sections into separate functions or improving pattern matching. 👌 Code Complexity: The code exhibits moderate complexity, mainly due to nested conditionals and a few long functions. Refactoring some of the more complex sections can further improve code maintainability and readability. 👮 Safety/Security: The code includes appropriate error handling and logging, which helps identify potential issues and ensures error-free execution. It demonstrates good practices for handling distributed operations and maintaining data consistency. The code appears to be safe and secure. 👍 🎪 Other: The code provides good modularity and separation of concerns by using separate functions for different operations. It follows a clear and logical structure, making it easy to understand and navigate. The use of protocols and well-defined interfaces adds flexibility and extensibility to the codebase. 👍 Here's the updated grade for Noizu.FastGlobal.Cluster: grade: - rubrix: 📚=95,🧾=90,⚙=90,👷‍♀️=80,👮=90,🎪=90","ref":"Noizu.FastGlobal.Cluster.html","title":"Noizu.FastGlobal.Cluster","type":"module"},{"doc":"Coordinates the put operation in the FastGlobal cluster. Parameters identifier : The identifier for the value. value : The value to be put into the cluster. settings : The cluster settings. options : Additional options for the put operation. Implementation The logic for the coordinate_put/4 function in the Noizu.FastGlobal.Cluster module is as follows: It takes the identifier, value, cluster settings, and additional options as inputs. It checks if a record for the identifier already exists in the FastGlobal cluster. If a record exists, it updates the record with the new value, origin, pool, revision, and timestamp. If a record does not exist, it creates a new record with the identifier, origin, pool, value, revision, and timestamp. It acquires a semaphore lock to ensure exclusive access to the identifier for updating. It acquires a nested semaphore lock to ensure that write operations are not executed concurrently. It waits for a certain period of time to acquire the semaphore lock. If the semaphore lock is acquired, it performs the following steps: It spawns asynchronous tasks to handle the update operation on each node in the cluster. For the local node, it calls the put/3 function to update the record. For remote nodes, it sends an RPC call or cast to the corresponding node to update the record. It waits for the tasks to complete and returns the result. If there is an error during the update process, it logs an error message. The logic is designed this way to coordinate the put operation in a distributed cluster environment. It ensures that only one process can update the record at a time to avoid conflicts and inconsistencies. By acquiring semaphore locks, it provides synchronization and prevents concurrent write operations. The use of asynchronous tasks allows for parallel processing of updates on different nodes in the cluster, improving performance and scalability.","ref":"Noizu.FastGlobal.Cluster.html#coordinate_put/4","title":"Noizu.FastGlobal.Cluster.coordinate_put/4","type":"function"},{"doc":"Retrieves the value for a given identifier from the FastGlobal cluster with a default value and options. Parameters identifier : The identifier for the value. default : The default value to be returned if the value is not found. options : Additional options for the retrieval. Implementation The logic for the get/1 function in the Noizu.FastGlobal.Cluster module is as follows: It first tries to retrieve the value for the given identifier from the FastGlobal cluster using the FastGlobal.get/1 function. If the value is found, it returns the value. If the value is not found, it checks if a default value is provided. If a default value is provided, it returns the default value. If a default value is not provided, it performs the following steps: It acquires a semaphore lock to ensure exclusive access to the identifier. It checks if there is a default value provider function. If there is, it calls the function and returns the result. If there is no default value provider function, it waits for a certain period of time to acquire the semaphore lock. If the semaphore lock is acquired, it releases the semaphore lock and performs the following steps: It retrieves the value for the identifier from the FastGlobal cluster again. If the value is found, it returns the value. If the value is still not found, it calls the sync_record/4 function to synchronize the record in the cluster. If there is an error during the synchronization, it returns the error. If the semaphore lock is not acquired, it returns the default value. The logic is designed this way to efficiently retrieve values from the FastGlobal cluster while ensuring that only one process can update the record at a time to avoid conflicts. It also provides flexibility by allowing the use of default values and handling different scenarios such as back pressure and timeouts.","ref":"Noizu.FastGlobal.Cluster.html#get/3","title":"Noizu.FastGlobal.Cluster.get/3","type":"function"},{"doc":"Retrieves a record for a given identifier from the FastGlobal cluster. Parameters identifier : The identifier for the record. Implementation Pass through to FastGlobal.get","ref":"Noizu.FastGlobal.Cluster.html#get_record/1","title":"Noizu.FastGlobal.Cluster.get_record/1","type":"function"},{"doc":"Retrieves the settings for the FastGlobal cluster. Returns The settings for the FastGlobal cluster. Implementation The logic for the get_settings/0 function in the Noizu.FastGlobal.Cluster module is as follows: It first tries to retrieve the settings by calling the FastGlobal.get/2 function with the :fast_global_settings identifier and a default value of an empty map %{} . If the retrieval is successful and the value is not equal to the default value, it returns the settings. If the retrieval fails or the value is equal to the default value, it logs a warning message and returns an empty map %{} as the default settings. The logic is designed this way to ensure that the settings for the FastGlobal cluster are retrieved correctly. By using the FastGlobal.get/2 function with a default value, it provides a fallback in case the settings are not present or cannot be retrieved. Logging a warning message helps in identifying potential issues with the settings. Returning an empty map as the default settings ensures that there is always a valid value to work with, even if the actual settings are not available. Code Review","ref":"Noizu.FastGlobal.Cluster.html#get_settings/0","title":"Noizu.FastGlobal.Cluster.get_settings/0","type":"function"},{"doc":"Puts a value into the FastGlobal cluster. Parameters identifier : The identifier for the value. value : The value to be put into the cluster. Implementation The put/3 function in the Noizu.FastGlobal.Cluster module is used to put a value into the FastGlobal cluster. Here is a concise explanation of how it works: Retrieve cluster settings. If the put origin is the current node, coordinate the put operation in the cluster using coordinate_put/4 . If the origin is different, send an RPC message to the origin node to perform the put operation. In coordinate_put/4 , update or create a record with the identifier and value. Acquire semaphores for exclusive access to write and update operations. Coordinate the put operation by putting the record into the cluster and updating local copies on other nodes. Release semaphores. Return the result of the put operation. The reason for this approach is to ensure that the put operation is performed consistently across the cluster and to handle cases where the origin of the put operation is different from the current node. By coordinating the put operation and updating the record in a synchronized manner, the FastGlobal cluster can maintain data consistency and handle distributed updates efficiently.","ref":"Noizu.FastGlobal.Cluster.html#put/3","title":"Noizu.FastGlobal.Cluster.put/3","type":"function"},{"doc":"Retrieves a record from the FastGlobal cluster. Parameters identifier : The identifier for the record. default : The default value to be returned if the record is not found. options : Additional options for the retrieval. tsup : Task Supervisor (optional). Description This function retrieves a record from the FastGlobal cluster. Implementation The sync_record/4 function in the Noizu.FastGlobal.Cluster module is responsible for retrieving a record from the FastGlobal cluster. It first checks if a semaphore lock can be acquired for the given identifier . If it can, it proceeds to the next step. If not, it returns the default value. It then checks if the record exists in the FastGlobal cluster. If it does, it returns the value of the record. If the record is not found, it checks the type of the default value provided: If default is a function that takes one argument, it calls the function with false as the argument and returns the result. If default is a function that takes no arguments, it calls the function and returns the result. If default is not a function, it simply returns the default value. If the semaphore lock can be acquired for the identifier , it waits for a certain period of time specified in the options before attempting to write the record to the cluster. This is to avoid multiple simultaneous write operations. After the specified wait period, it calls the sync_record__write/4 function to write the record to the FastGlobal cluster. If the write operation is successful, it releases the semaphore lock and returns the value of the record. If any errors occur during the process, it returns nil . In summary, sync_record/4 retrieves a record from the FastGlobal cluster and handles cases where the record is not found or needs to be written to the cluster. It ensures that only one write operation is performed at a time to avoid conflicts.","ref":"Noizu.FastGlobal.Cluster.html#sync_record/4","title":"Noizu.FastGlobal.Cluster.sync_record/4","type":"function"},{"doc":"Writes a record to the FastGlobal cluster. Parameters identifier : The identifier for the record. value : The value to be written. options : Additional options for the write. _tsup : Task Supervisor (optional). Implementation The logic for the sync_record__write/4 function in the Noizu.FastGlobal.Cluster module is as follows: It takes an identifier , value , options , and an optional task supervisor ( _tsup ) as input. It logs a warning message indicating that a write operation is being performed for the given identifier. It retrieves the cluster settings by calling the get_settings/0 function. It determines the origin node for the write operation based on the options or the cluster settings. It performs the following steps based on the origin node: If the origin node is the current node, it calls the get_record/1 function to retrieve the existing record for the identifier. If the origin node is different from the current node, it uses RPC to call the get_record/1 function on the origin node to retrieve the existing record. If there is an error during the retrieval of the existing record, it sets the record to nil . Based on the result of the record retrieval, it performs the following steps: If the record is not nil , it updates the existing record with the new value and other information such as the revision and timestamp. If the record is nil , it creates a new record with the identifier, origin node, pool of nodes, value, revision, and timestamp. It uses a semaphore to ensure exclusive access to the identifier for the write operation. It performs the write operation by calling the put/3 function to update the record in the FastGlobal cluster. It handles the result of the write operation and logs a warning message indicating that the write operation is complete. The logic is designed this way to handle the synchronization of writing a record in the FastGlobal cluster across multiple nodes in a distributed cluster. By retrieving the existing record and updating it or creating a new record, it ensures that the most up-to-date information is stored in the cluster. The use of a semaphore helps to manage concurrent write operations and prevent conflicts. The warning messages provide visibility and monitoring of the write operations.","ref":"Noizu.FastGlobal.Cluster.html#sync_record__write/4","title":"Noizu.FastGlobal.Cluster.sync_record__write/4","type":"function"},{"doc":"The Noizu.FastGlobal.Database module defines the schema for the FastGlobal Database. This module uses the Amnesia library, a simple and powerful library for working with Mnesia, the Erlang's built-in distributed real-time database. Tables The database consists of the following tables: Settings : stores the settings for the FastGlobal database. Code Review The code is simple and straightforward, following the conventions of the Amnesia library. The schema definition is clear, and the use of the deftable macro makes it easy to understand the structure of the database tables. The Settings table is well-defined, with clearly named fields. The use of the type: :set option indicates that each entry in the table should be unique. However, it should be noted that no indexes are defined for the table, which may impact performance if the table grows large and queries are performed on non-key fields. The @type specification for the Settings struct is a good practice, as it provides type checking and documentation benefits.","ref":"Noizu.FastGlobal.Database.html","title":"Noizu.FastGlobal.Database","type":"module"},{"doc":"Alias all the table names in the current scope and require what's needed.","ref":"Noizu.FastGlobal.Database.html#__using__/1","title":"Noizu.FastGlobal.Database.__using__/1","type":"macro"},{"doc":"Create the database, it calls .create on every defined table, raises in case of error.","ref":"Noizu.FastGlobal.Database.html#create!/1","title":"Noizu.FastGlobal.Database.create!/1","type":"function"},{"doc":"Create the database, it calls .create on every defined table.","ref":"Noizu.FastGlobal.Database.html#create/1","title":"Noizu.FastGlobal.Database.create/1","type":"function"},{"doc":"Destroy the database, it calls .destroy on every defined table, raises in case of error.","ref":"Noizu.FastGlobal.Database.html#destroy!/0","title":"Noizu.FastGlobal.Database.destroy!/0","type":"function"},{"doc":"Destroy the database, it calls .destroy on every defined table.","ref":"Noizu.FastGlobal.Database.html#destroy/0","title":"Noizu.FastGlobal.Database.destroy/0","type":"function"},{"doc":"","ref":"Noizu.FastGlobal.Database.html#metadata/0","title":"Noizu.FastGlobal.Database.metadata/0","type":"function"},{"doc":"List of atoms of the defined tables in the database.","ref":"Noizu.FastGlobal.Database.html#tables/0","title":"Noizu.FastGlobal.Database.tables/0","type":"function"},{"doc":"Wait for the database to be loaded.","ref":"Noizu.FastGlobal.Database.html#wait/1","title":"Noizu.FastGlobal.Database.wait/1","type":"function"},{"doc":"This module defines the Settings table for the Noizu.FastGlobal.Database . The Settings table has the following structure: identifier : a field of any type that serves as the identifier for the setting. value : a field of any type that holds the value of the setting. The table is of type :set , which means each entry in the table is unique. There are no indexes defined for this table.","ref":"Noizu.FastGlobal.Database.Settings.html","title":"Noizu.FastGlobal.Database.Settings","type":"module"},{"doc":"Require the needed modules to use the table effectively.","ref":"Noizu.FastGlobal.Database.Settings.html#__using__/1","title":"Noizu.FastGlobal.Database.Settings.__using__/1","type":"macro"},{"doc":"Add a copy of the table on the given node with the given mode.","ref":"Noizu.FastGlobal.Database.Settings.html#add_copy/2","title":"Noizu.FastGlobal.Database.Settings.add_copy/2","type":"function"},{"doc":"Add the index in the table for the given attribute.","ref":"Noizu.FastGlobal.Database.Settings.html#add_index/1","title":"Noizu.FastGlobal.Database.Settings.add_index/1","type":"function"},{"doc":"Read a record based on a slot, see mnesia:dirty_slot .","ref":"Noizu.FastGlobal.Database.Settings.html#at!/1","title":"Noizu.FastGlobal.Database.Settings.at!/1","type":"function"},{"doc":"The in order keyword list of attributes passed when the table was defined.","ref":"Noizu.FastGlobal.Database.Settings.html#attributes/0","title":"Noizu.FastGlobal.Database.Settings.attributes/0","type":"function"},{"doc":"Check if the table is a bag.","ref":"Noizu.FastGlobal.Database.Settings.html#bag?/0","title":"Noizu.FastGlobal.Database.Settings.bag?/0","type":"function"},{"doc":"Clear the content of the table.","ref":"Noizu.FastGlobal.Database.Settings.html#clear/0","title":"Noizu.FastGlobal.Database.Settings.clear/0","type":"function"},{"doc":"Change the copying mode of the table on the given node, see mnesia:change_table_copy_type . Modes :disk sets :disc_copies mode :disk! sets :disc_only_copies mode :memory sets :ram_copies mode","ref":"Noizu.FastGlobal.Database.Settings.html#copying/2","title":"Noizu.FastGlobal.Database.Settings.copying/2","type":"function"},{"doc":"Get the number of records in the table.","ref":"Noizu.FastGlobal.Database.Settings.html#count/0","title":"Noizu.FastGlobal.Database.Settings.count/0","type":"function"},{"doc":"","ref":"Noizu.FastGlobal.Database.Settings.html#create!/1","title":"Noizu.FastGlobal.Database.Settings.create!/1","type":"function"},{"doc":"Create the table with the given copying mode and inherent definition.","ref":"Noizu.FastGlobal.Database.Settings.html#create/1","title":"Noizu.FastGlobal.Database.Settings.create/1","type":"function"},{"doc":"Return the database the table belongs to.","ref":"Noizu.FastGlobal.Database.Settings.html#database/0","title":"Noizu.FastGlobal.Database.Settings.database/0","type":"function"},{"doc":"Delete the record or the given key from the table, see mnesia:dirty_delete and mnesia:dirty_delete_object .","ref":"Noizu.FastGlobal.Database.Settings.html#delete!/1","title":"Noizu.FastGlobal.Database.Settings.delete!/1","type":"function"},{"doc":"Delete the record or the given key from the table, see mnesia:delete and mnesia:delete_object .","ref":"Noizu.FastGlobal.Database.Settings.html#delete/1","title":"Noizu.FastGlobal.Database.Settings.delete/1","type":"function"},{"doc":"Delete the record or the given key from the table with the given lock, see mnesia:delete and mnesia:delete_object . Locks :write sets a :write lock :write! sets a :sticky_write lock","ref":"Noizu.FastGlobal.Database.Settings.html#delete/2","title":"Noizu.FastGlobal.Database.Settings.delete/2","type":"function"},{"doc":"Delete a copy of the table from the given node.","ref":"Noizu.FastGlobal.Database.Settings.html#delete_copy/1","title":"Noizu.FastGlobal.Database.Settings.delete_copy/1","type":"function"},{"doc":"Delete the index in the table for the given attribute.","ref":"Noizu.FastGlobal.Database.Settings.html#delete_index/1","title":"Noizu.FastGlobal.Database.Settings.delete_index/1","type":"function"},{"doc":"Destroy the table, raising if an error occurs.","ref":"Noizu.FastGlobal.Database.Settings.html#destroy!/0","title":"Noizu.FastGlobal.Database.Settings.destroy!/0","type":"function"},{"doc":"Destroy the table.","ref":"Noizu.FastGlobal.Database.Settings.html#destroy/0","title":"Noizu.FastGlobal.Database.Settings.destroy/0","type":"function"},{"doc":"Return the first key or record in the table, see mnesia:dirty_first . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.FastGlobal.Database.Settings.html#first!/1","title":"Noizu.FastGlobal.Database.Settings.first!/1","type":"function"},{"doc":"Return the first key or record in the table, see mnesia:first . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.FastGlobal.Database.Settings.html#first/2","title":"Noizu.FastGlobal.Database.Settings.first/2","type":"function"},{"doc":"Fold the whole table from the left, see mnesia:foldl .","ref":"Noizu.FastGlobal.Database.Settings.html#foldl/2","title":"Noizu.FastGlobal.Database.Settings.foldl/2","type":"function"},{"doc":"Fold the whole table from the right, see mnesia:foldr .","ref":"Noizu.FastGlobal.Database.Settings.html#foldr/2","title":"Noizu.FastGlobal.Database.Settings.foldr/2","type":"function"},{"doc":"Force load the table.","ref":"Noizu.FastGlobal.Database.Settings.html#force/0","title":"Noizu.FastGlobal.Database.Settings.force/0","type":"function"},{"doc":"","ref":"Noizu.FastGlobal.Database.Settings.html#hook_read!/2","title":"Noizu.FastGlobal.Database.Settings.hook_read!/2","type":"function"},{"doc":"","ref":"Noizu.FastGlobal.Database.Settings.html#hook_read/2","title":"Noizu.FastGlobal.Database.Settings.hook_read/2","type":"function"},{"doc":"","ref":"Noizu.FastGlobal.Database.Settings.html#hook_write!/1","title":"Noizu.FastGlobal.Database.Settings.hook_write!/1","type":"function"},{"doc":"","ref":"Noizu.FastGlobal.Database.Settings.html#hook_write/1","title":"Noizu.FastGlobal.Database.Settings.hook_write/1","type":"function"},{"doc":"Get the name of the id key.","ref":"Noizu.FastGlobal.Database.Settings.html#id/0","title":"Noizu.FastGlobal.Database.Settings.id/0","type":"function"},{"doc":"Get information about the table, see mnesia:table_info .","ref":"Noizu.FastGlobal.Database.Settings.html#info/1","title":"Noizu.FastGlobal.Database.Settings.info/1","type":"function"},{"doc":"Return the key of the record.","ref":"Noizu.FastGlobal.Database.Settings.html#key/1","title":"Noizu.FastGlobal.Database.Settings.key/1","type":"function"},{"doc":"Return all keys in the table, see mnesia:dirty_all_keys .","ref":"Noizu.FastGlobal.Database.Settings.html#keys!/0","title":"Noizu.FastGlobal.Database.Settings.keys!/0","type":"function"},{"doc":"Return all the keys in the table, see mnesia:all_keys .","ref":"Noizu.FastGlobal.Database.Settings.html#keys/0","title":"Noizu.FastGlobal.Database.Settings.keys/0","type":"function"},{"doc":"Return the last key or record in the table, see mnesia:dirty_last . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.FastGlobal.Database.Settings.html#last!/1","title":"Noizu.FastGlobal.Database.Settings.last!/1","type":"function"},{"doc":"Return the last key or record in the table, see mnesia:last . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.FastGlobal.Database.Settings.html#last/2","title":"Noizu.FastGlobal.Database.Settings.last/2","type":"function"},{"doc":"Lock the table with the given lock. Locks :write sets a :write lock :write! sets a :sticky_write lock :read sets a :read lock","ref":"Noizu.FastGlobal.Database.Settings.html#lock/1","title":"Noizu.FastGlobal.Database.Settings.lock/1","type":"function"},{"doc":"Change the table majority.","ref":"Noizu.FastGlobal.Database.Settings.html#majority/1","title":"Noizu.FastGlobal.Database.Settings.majority/1","type":"function"},{"doc":"Set master nodes for the table, see mnesia:set_master_nodes .","ref":"Noizu.FastGlobal.Database.Settings.html#master_nodes/1","title":"Noizu.FastGlobal.Database.Settings.master_nodes/1","type":"function"},{"doc":"Select records in the table using simple don't care values, see mnesia:dirty_match_object .","ref":"Noizu.FastGlobal.Database.Settings.html#match!/1","title":"Noizu.FastGlobal.Database.Settings.match!/1","type":"function"},{"doc":"Select records in the table using simple don't care values, see mnesia:match_object .","ref":"Noizu.FastGlobal.Database.Settings.html#match/2","title":"Noizu.FastGlobal.Database.Settings.match/2","type":"function"},{"doc":"Check if the key is present in the table.","ref":"Noizu.FastGlobal.Database.Settings.html#member?/1","title":"Noizu.FastGlobal.Database.Settings.member?/1","type":"function"},{"doc":"Change the access of the table, see mnesia:change_table_access_mode . Modes :both sets read and write mode, it's the default. :read! sets read-only mode.","ref":"Noizu.FastGlobal.Database.Settings.html#mode/1","title":"Noizu.FastGlobal.Database.Settings.mode/1","type":"function"},{"doc":"Move a copy of the table from the given node to another given node.","ref":"Noizu.FastGlobal.Database.Settings.html#move_copy/2","title":"Noizu.FastGlobal.Database.Settings.move_copy/2","type":"function"},{"doc":"Return the next key or record in the table, see mnesia:dirty_next . If you're calling this function from an instance of the table (a record in it), it will get you the next record, if you're calling it directly on the module it will treat the argument as key to start from and return you the next key.","ref":"Noizu.FastGlobal.Database.Settings.html#next!/1","title":"Noizu.FastGlobal.Database.Settings.next!/1","type":"function"},{"doc":"Return the next key or record in the table, see mnesia:next . If you're calling this function from an instance of the table (a record in it), it will get you the next record, if you're calling it directly on the module it will treat the argument as key to start from and return you the next key.","ref":"Noizu.FastGlobal.Database.Settings.html#next/1","title":"Noizu.FastGlobal.Database.Settings.next/1","type":"function"},{"doc":"The options passed when the table was defined.","ref":"Noizu.FastGlobal.Database.Settings.html#options/0","title":"Noizu.FastGlobal.Database.Settings.options/0","type":"function"},{"doc":"Check if the table is an ordered set.","ref":"Noizu.FastGlobal.Database.Settings.html#ordered_set?/0","title":"Noizu.FastGlobal.Database.Settings.ordered_set?/0","type":"function"},{"doc":"Return the previous key or record in the table, see mnesia:dirty_prev . If you're calling this function from an instance of the table (a record in it), it will get you the previous record, if you're calling it directly on the module it will treat the argument as key to start from and return you the previous key.","ref":"Noizu.FastGlobal.Database.Settings.html#prev!/1","title":"Noizu.FastGlobal.Database.Settings.prev!/1","type":"function"},{"doc":"Return the previous key or record in the table, see mnesia:prev . If you're calling this function from an instance of the table (a record in it), it will get you the previous record, if you're calling it directly on the module it will treat the argument as key to start from and return you the previous key.","ref":"Noizu.FastGlobal.Database.Settings.html#prev/1","title":"Noizu.FastGlobal.Database.Settings.prev/1","type":"function"},{"doc":"Change the table loading priority.","ref":"Noizu.FastGlobal.Database.Settings.html#priority/1","title":"Noizu.FastGlobal.Database.Settings.priority/1","type":"function"},{"doc":"Return properties of the table.","ref":"Noizu.FastGlobal.Database.Settings.html#properties/0","title":"Noizu.FastGlobal.Database.Settings.properties/0","type":"function"},{"doc":"Read a record from the table, see mnesia:dirty_read . Unlike mnesia:dirty_read this returns either the record or nil.","ref":"Noizu.FastGlobal.Database.Settings.html#read!/1","title":"Noizu.FastGlobal.Database.Settings.read!/1","type":"function"},{"doc":"Read a record from the table with the given lock, see mnesia:read . Unlike mnesia:read this returns either the record or nil. Locks :write sets a :write lock :write! sets a :sticky_write lock :read sets a :read lock","ref":"Noizu.FastGlobal.Database.Settings.html#read/2","title":"Noizu.FastGlobal.Database.Settings.read/2","type":"function"},{"doc":"Read records from the table based on a secondary index given as position, see mnesia:dirty_index_read .","ref":"Noizu.FastGlobal.Database.Settings.html#read_at!/2","title":"Noizu.FastGlobal.Database.Settings.read_at!/2","type":"function"},{"doc":"Read records from the table based on a secondary index given as position, see mnesia:index_read .","ref":"Noizu.FastGlobal.Database.Settings.html#read_at/2","title":"Noizu.FastGlobal.Database.Settings.read_at/2","type":"function"},{"doc":"Select records in the table using a match_spec, see mnesia:dirty_select .","ref":"Noizu.FastGlobal.Database.Settings.html#select!/1","title":"Noizu.FastGlobal.Database.Settings.select!/1","type":"function"},{"doc":"Select records in the table using a match_spec, see mnesia:select .","ref":"Noizu.FastGlobal.Database.Settings.html#select/1","title":"Noizu.FastGlobal.Database.Settings.select/1","type":"function"},{"doc":"Select records in the given table using a match_spec passing a limit or a lock kind, see mnesia:select .","ref":"Noizu.FastGlobal.Database.Settings.html#select/2","title":"Noizu.FastGlobal.Database.Settings.select/2","type":"function"},{"doc":"Select records in the given table using a match_spec passing a limit and a lock kind, see mnesia:select .","ref":"Noizu.FastGlobal.Database.Settings.html#select/3","title":"Noizu.FastGlobal.Database.Settings.select/3","type":"function"},{"doc":"Check if the table is a set.","ref":"Noizu.FastGlobal.Database.Settings.html#set?/0","title":"Noizu.FastGlobal.Database.Settings.set?/0","type":"function"},{"doc":"Return an iterator to use with the Enum functions using dirty operations to retrieve information.","ref":"Noizu.FastGlobal.Database.Settings.html#stream!/0","title":"Noizu.FastGlobal.Database.Settings.stream!/0","type":"function"},{"doc":"Return an iterator to use with Enum functions.","ref":"Noizu.FastGlobal.Database.Settings.html#stream/1","title":"Noizu.FastGlobal.Database.Settings.stream/1","type":"function"},{"doc":"Return the type of the table.","ref":"Noizu.FastGlobal.Database.Settings.html#type/1","title":"Noizu.FastGlobal.Database.Settings.type/1","type":"function"},{"doc":"Wait for the table optionally with a timeout.","ref":"Noizu.FastGlobal.Database.Settings.html#wait/1","title":"Noizu.FastGlobal.Database.Settings.wait/1","type":"function"},{"doc":"Select records in the table using an Exquisite query, see Exquisite.match/2 and mnesia:dirty_select . Options select - Exquisite selector spec qualified - whether to set a name for the record or not","ref":"Noizu.FastGlobal.Database.Settings.html#where!/2","title":"Noizu.FastGlobal.Database.Settings.where!/2","type":"macro"},{"doc":"Select records in the table using an Exquisite query, see Exquisite.match/2 and mnesia:select . Options limit - sets the count of elements to select in every continuation lock - sets the kind of lock to use select - Exquisite selector spec qualified - whether to set a name for the record or not","ref":"Noizu.FastGlobal.Database.Settings.html#where/2","title":"Noizu.FastGlobal.Database.Settings.where/2","type":"macro"},{"doc":"Write the record to the table, see mnesia:dirty_write . Missing fields tagged as autoincrement will be incremented with the counter if nil .","ref":"Noizu.FastGlobal.Database.Settings.html#write!/1","title":"Noizu.FastGlobal.Database.Settings.write!/1","type":"function"},{"doc":"Write the record to the table, see mnesia:write . Missing fields tagged as autoincrement will be incremented with the counter if nil .","ref":"Noizu.FastGlobal.Database.Settings.html#write/2","title":"Noizu.FastGlobal.Database.Settings.write/2","type":"function"},{"doc":"","ref":"Noizu.FastGlobal.Database.Settings.html#t:autoincrement/0","title":"Noizu.FastGlobal.Database.Settings.autoincrement/0","type":"type"},{"doc":"","ref":"Noizu.FastGlobal.Database.Settings.html#t:t/0","title":"Noizu.FastGlobal.Database.Settings.t/0","type":"type"},{"doc":"","ref":"Noizu.FastGlobal.Record.html","title":"Noizu.FastGlobal.Record","type":"module"},{"doc":"","ref":"Noizu.FastGlobal.Record.html#t:t/0","title":"Noizu.FastGlobal.Record.t/0","type":"type"},{"doc":"Elixir Core Common protocols and convenience methods leveraged by other Noizu Labs, Inc. frameworks.","ref":"readme.html","title":"README","type":"extras"},{"doc":"The Noizu.ERP protocol allows ref tuples {:ref, Entity, identifier} to be used in place of nesting full objects in other objects. It also supports encoding/decoding those ref tuples to and from strings for use in RESTful APIs. Behind the scenes, the ref tuple {:ref, Module, identifier} unpacks itself by calling into Module, which must adhere to the protocol and provide local copies of the protocol options. Example usage: Noizu.ERP . entity ( { :ref , Noizu.ElixirCore.CallerEntity , :system } ) == % Noizu.ElixirCore.CallerEntity { identifier : :system } Noizu.ERP . ref ( % Noizu.ElixirCore.CallerEntity { identifier : :system } ) == { :ref , Noizu.ElixirCore.CallerEntity , :system } Noizu.ERP . sref ( % Noizu.ElixirCore.CallerEntity { identifier : :system } ) == &quot;ref.noizu-caller.system&quot; Noizu.ERP . ref ( &quot;ref.noizu-caller.system&quot; ) == { :ref , Noizu.ElixirCore.CallerEntity , :system } Noizu.ERP . ref ( &quot;george&quot; ) == nil The methods [id/1, ref/1, sref/1, entity/1,2, entity!/1,2, record/1,2, record!/1,2] may all be used interchangeably on ref strings, tuples, or actual entities without having to know in advance what type of object you are accessing. New Additions Recently added id_ok/1, ref_ok/1, sref_ok/1, entity_ok/1,2, entity_ok!/1,2 mirror id/1, ref/1, sref/1, entity/1,2, entity!/1,2 but return {:ok, value} | {:error, details} in their place for use in with and other pattern matching scenarios.","ref":"readme.html#noizu-erp-protocol","title":"README - Noizu.ERP Protocol","type":"extras"},{"doc":"The CallingContext is a context object used to track a caller's state and permissions, along with a unique request identifier for tracking requests as they travel through the layers of your application. It is useful for log collation, permission checks, and access auditing. The basic structure of the CallingContext object is as follows: % CallingContext { caller : { :ref , User.Entity , 1234 } , token : &quot;ajlakjfdowpoewpfjald&quot; , reason : &quot;New User Setup&quot; , auth : %{ permissions : %{ admin : true , system : true , internal : true , manage_users : true } } , options : %{ } , time : DateTime . t | nil , outer_context : % CallingContext { } } Configuration If you have custom ACL/Authorization Bearer tokens that you want to extract your caller/permissions from, you can use the following configuration settings: Request ID Extraction Strategy: {:module, :function} or function/2 that accepts (conn, default) and pulls the request ID ( CallingContext.token ) from Plug.Conn . config :noizu_core, token_strategy: {Noizu.ElixirCore.CallingContext, :extract_token} Request Reason Extraction Strategy: {:module, :function} or function/2 that accepts (conn, default) and pulls the request reason ( CallingContext.reason ) from Plug.Conn . config :noizu_core, token_strategy: {Noizu.ElixirCore.CallingContext, :extract_reason} Request Caller Extraction Strategy: {:module, :function} or function/2 that accepts (conn, default) and pulls the request caller ( CallingContext.caller ) from Plug.Conn . config :noizu_core, get_plug_caller: {Noizu.ElixirCore.CallingContext, :extract_caller} Request Caller's Auth Map Extraction Strategy: {:module, :function} or function/2 that accepts (conn, default) and returns the effective permission map ( ContextCaller.auth ). config :noizu_core, acl_strategy: {Noizu.ElixirCore.CallingContext, :default_auth} Alternatively, you can extract the caller and effective permission list map on your own and use the following functions: Noizu.ElixirCore.CallingContext.new_conn(your_caller, your_caller_auth_map, %Plug.Conn{}, options) Noizu.ElixirCore.CallingContext.new(your_caller, your_caller_auth_map, options) Examples Creation Create a new Calling Context with the default Admin user and permissions. Noizu.ElixirCore.CallingContext.admin() Create a new Calling Context with the default System user and permissions. Noizu.ElixirCore.CallingContext.system() Create a new Calling Context with the default Internal user and permissions. Noizu.ElixirCore.CallingContext.internal() Create a new Calling Context with the default Restricted user and permissions. Noizu.ElixirCore.CallingContext.restricted() Create a new context by pulling the request caller, auth map, token, and reason from Plug.Conn using user-provided extract methods. Noizu.ElixirCore.CallingContext.new_conn(conn, options) Logging Add context metadata to Logger. Example: [context_token: context.token, context_time: context.time, context_caller: context.caller] ++ context.options.log_filter Noizu.ElixirCore.CallingContext.meta_update(context) Strip context metadata from Logger. Noizu.ElixirCore.CallingContext.meta_strip(context) Get context metadata to append to Logger. Logger.info(&quot;Your Log&quot;, Noizu.ElixirCore.CallingContext.metadata(context)) Guards Extensions Check if the context has admin, internal, system, or restricted auth flags, etc. cond do is_admin_caller ( context ) -&gt; :admin is_system_caller ( context ) -&gt; :system is_internal_caller ( context ) -&gt; :internal is_restricted_caller ( context ) -&gt; :restricted permission? ( context , :manage_users ) -&gt; :caller_can_manage_users permission? ( context , :security_level , 5 ) -&gt; :caller_has_level_5_clearance has_call_reason? ( context ) -&gt; :context_has_call_reason end","ref":"readme.html#callingcontext","title":"README - CallingContext","type":"extras"},{"doc":"Some custom guards are provided to make authentication checks and code readability cleaner: Custom Guard Purpose is_caller_context(context) Check if the variable is a %CallingContext{} struct caller_context_with_permissions(context) Check if the variable is a %CallingContext{} struct with context.auth.permissions map is_system_caller(context) Check if the context has system-level permission is_admin_caller(context) Check if the context has admin-level permission is_internal_caller(context) Check if the context has internal-level permission is_restricted_caller(context) Check if the context has restricted-level permission permission?(context, check) Check if the context has the specified permission with a truthy value permission?(context, check, value) Check if the context has the specified permission with a specific value has_call_reason?(context) Check if the context's call_reason is set is_ref(value) Check if the object is a {:ref, entity, id} tuple is_sref(value) Check if the object is a &quot;ref.code-name.id&quot; string reference entity_ref(value) Check if the object is a ref tuple or struct type with a vsn field","ref":"readme.html#custom-guards","title":"README - Custom Guards","type":"extras"},{"doc":"Option helpers make it easier to define restricted/optional requirements and default constraints for use in metaprogramming or parameter acceptance. The following test snippet provides a detailed example of how to use option helpers: Test code example","ref":"readme.html#option-helper","title":"README - Option Helper","type":"extras"},{"doc":"Partial Object checks allow you to compare two objects based on specific fields, with the ability to restrict allowed values or specify optional fields. This is useful for creating custom assert methods that only check specific fields of an object. The Partial Object Check scans the whole object and reports all constraint violations at once. Here are some code examples of how to use the Partial Object Check utility: Test code example","ref":"readme.html#testing-utility-partial-object-check","title":"README - Testing Utility - Partial Object Check","type":"extras"},{"doc":"Noizu.ElixirCore.CallerEntity: Represents a caller entity with an identifier. Noizu.ElixirCore.UnauthenticatedCallerEntity: Represents an unauthenticated caller entity. Feel free to explore the code and leverage these convenient functionalities in your projects!","ref":"readme.html#convenience-structs","title":"README - Convenience Structs","type":"extras"}]